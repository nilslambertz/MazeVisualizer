{"version":3,"sources":["Components/Content/Main.js","Components/Navigation/NavBar.js","Components/Settings/SettingsBar.js","Utils/Functions.js","Algorithms/Dfs.js","Algorithms/Dijkstra.js","Algorithms/GreedySearch.js","Algorithms/AStar.js","App.js","Utils/Animation.js","serviceWorker.js","index.js"],"names":["Main","className","this","props","algorithm","solved","id","printMaze","steps","href","target","rel","printTremauxMaze","printDfsMaze","maze","map","c","i","a","c2","i2","a2","key","width","left","right","top","style","borderBottom","bottom","borderLeft","borderTop","borderRight","React","Component","NavBar","algorithmList","setAlgorithm","animationRunning","onClick","algo","SettingsBar","size","animationSpeed","newMazeClick","animationClick","changeSpeed","perfectMaze","setPerfectMaze","perfectMazeStyle","color","rowSpan","type","min","max","value","onChange","createMaze","height","j","walls","remainingWalls","Set","length","add","firstX","Math","floor","random","firstY","addWalls","delete","getRandomItem","x","parseInt","substring","indexOf","y","neighbours","getNeighbours","randomNeighbour","splice","createPath","primsAlgorithm","n","elem","getPathNeighbours","startX","startY","endX","endY","start","end","x1","y1","x2","y2","push","set","items","Array","from","wasHere","path","count","getPathRecursive","parent","dfs","getDfsSteps","m","s","e","shift","pop","queue","stack","PriorityQueue","require","getDijkstra","b","distance","enq","isEmpty","deq","undefined","dijkstra","getGreedy","abs","sort","greedySearch","getDistance","getAStar","heuristic","h","aStar","animation","Animation","setState","addCountFunction","pathNumber","getAlgorithmTitles","Object","keys","pathStepBack","pathStepFront","defaultStep","addCount","arrayStep","arr","tremauxStep","lastArr","lastElem","junctionX","junctionY","mark","markedX","markedY","markCount","first","last","speed","getSteps","step","changeAlgorithm","getStepFunction","pathFunction","stepFunction","stepCount","nr","saveMaze","animate","alert","values","slice","finished","pathFunc","clearInterval","interval","animatePath","pathAnimating","func","int","setInterval","endAnimation","App","state","setStart","setEnd","newSpeed","parseFloat","changeMaze","changeState","v","startAnimation","addToStepCount","algos","changeSize","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ea928403.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Main.css';\r\nimport \"./MazeElem.css\";\r\n\r\nclass Main extends React.Component {\r\n    render() {\r\n        let className = \"transition\";\r\n        if(this.props.algorithm === \"tremaux\") {\r\n            className = \"noTransition\";\r\n        }\r\n        if(this.props.solved === true) className += \" solved\";\r\n        return (\r\n            <div id=\"mainDiv\" className={className}>\r\n                <div id=\"mazeGrid\">\r\n                    {this.printMaze()}\r\n                    <div id=\"stepCountDiv\">steps: {this.props.steps}</div>\r\n                </div>\r\n                <div id=\"footer\">by <a href=\"http://www.nilslambertz.de\" target=\"_blank\" rel=\"noopener noreferrer\">nils lambertz</a></div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    printMaze() {\r\n        if(this.props.algorithm === \"tremaux\") {\r\n            return this.printTremauxMaze();\r\n        }\r\n        return this.printDfsMaze();\r\n    }\r\n\r\n    printDfsMaze() {\r\n        return this.props.maze.map(function(c, i, a) {\r\n            return c.map(function(c2, i2, a2) {\r\n                if(c2 === 0) {\r\n                    return <div className={\"mazeElem empty\"} key={i+i2}/>;\r\n                } else if(c2 === 1) {\r\n                    return <div className={\"mazeElem wall\"} key={i+i2}/>;\r\n                } else if(c2 === 2) {\r\n                    return <div className={\"mazeElem start\"} key={i+i2}/>;\r\n                } else if(c2 === 3) {\r\n                    return <div className={\"mazeElem end\"} key={i+i2}/>\r\n                } else if(c2 === 4) {\r\n                    return <div className={\"mazeElem searched\"} key={i+i2}/>;\r\n                } else if(c2 === 5) {\r\n                    return <div className={\"mazeElem correctPath\"} key={i+i2}/>;\r\n                }\r\n                return <div className={\"mazeElem\"} key={i+i2}/>;\r\n            })\r\n        });\r\n    }\r\n\r\n    printTremauxMaze() {\r\n        return this.props.maze.map(function(c, i, a) {\r\n            return c.map(function(c2, i2, a2) {\r\n                if(c2 === 0) {\r\n                    return <div className={\"mazeElem empty\"} key={i+i2}/>;\r\n                } else if(c2 === 1) {\r\n                    return <div className={\"mazeElem wall\"} key={i+i2}/>;\r\n                } else if(c2 === 2) {\r\n                    return <div className={\"mazeElem start\"} key={i+i2}/>;\r\n                } else if(c2 === 3) {\r\n                    return <div className={\"mazeElem end\"} key={i+i2}/>\r\n                } else if(c2 === 4) {\r\n                    return <div className={\"mazeElem searched\"} key={i+i2}/>;\r\n                } else if(c2 === 5) {\r\n                    return <div className={\"mazeElem correctPath\"} key={i+i2}/>;\r\n                } else {\r\n                    let width = \"2px solid \";\r\n                    let left = c2.left > 0 ? (c2.left > 1 ? \"red\" : \"orange\") : \"none\";\r\n                    let right = c2.right > 0 ? (c2.right > 1 ? \"red\" : \"orange\") : \"none\";\r\n                    let top = c2.top > 0 ? (c2.top > 1 ? \"red\" : \"orange\") : \"none\";\r\n                    let bottom = c2.bottom > 0 ? (c2.bottom > 1 ? \"red\" : \"orange\") : \"none\";\r\n                    let style = {\r\n                        borderBottom: width + bottom,\r\n                        borderLeft: width + left,\r\n                        borderTop: width + top,\r\n                        borderRight: width + right\r\n                    }\r\n                    return <div className={\"mazeElem empty\"} style={style} key={i+i2}/>;\r\n                }\r\n            })\r\n        });\r\n    }\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport './NavBar.css';\r\n\r\nfunction NavBar({algorithmList, algorithm, setAlgorithm, animationRunning}) {\r\n\r\n    function changeAlgorithm(algo) {\r\n        if(animationRunning) return;\r\n\r\n        setAlgorithm(algo);\r\n    }\r\n\r\n    return (\r\n        <div id=\"navbar\">\r\n            {algorithmList.map(function(c, i, a) {\r\n                let className = \"navElem\";\r\n                if(c === algorithm) {\r\n                    className += \" active\";\r\n                } else if (animationRunning) {\r\n                    className += \" disabled\"\r\n                }\r\n                return <div key={c} className={className} onClick={() => changeAlgorithm(c)}>{c}</div>;\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nimport './SettingsBar.css';\r\n\r\nfunction SettingsBar({size, solved, animationRunning, animationSpeed, newMazeClick, animationClick, changeSpeed, perfectMaze, setPerfectMaze}) {\r\n    const playStyle = {\r\n        color: \"lightgreen\"\r\n    }\r\n    const stopStyle = {\r\n        color: \"orange\"\r\n    }\r\n\r\n    let perfectMazeStyle = {\r\n        color: perfectMaze ? \"#62D40C\" : \"#E98A45\"\r\n    }\r\n\r\n    return (\r\n        <div id=\"settingsBar\">\r\n            <div id=\"settingsDiv\">\r\n                <table>\r\n                    <tbody>\r\n                    <tr>\r\n                        <td className={\"settingsButton\" + (solved ? \" noClickSetting\" : \"\")} rowSpan=\"2\" style={animationRunning ? stopStyle : playStyle} onClick={animationClick}>\r\n                            {animationRunning ? \"stop\" : \"start\"}\r\n                        </td>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n                <table className={(animationRunning ? \"disabledSetting\" : \"\")}>\r\n                    <tbody>\r\n                    <tr>\r\n                        <td id=\"newMaze\" className=\"settingsButton\" rowSpan=\"2\" onClick={newMazeClick}>\r\n                            new maze\r\n                        </td>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n                <table className={(animationRunning ? \"disabledSetting\" : \"\")}>\r\n                    <tbody>\r\n                    <tr>\r\n                        <td id=\"perfectMaze\" style={perfectMazeStyle} className=\"settingsButton\" rowSpan=\"2\" onClick={() => setPerfectMaze(!perfectMaze)}>\r\n                            perfect maze: {perfectMaze ? \"✅\" : \"❌\"}\r\n                        </td>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n                {<table className={(animationRunning ? \"disabledSetting\" : \"\")}>\r\n                    <tbody>\r\n                    <tr>\r\n                        <td>\r\n                            <input type=\"range\" min=\"10\" max=\"500\" value={animationSpeed} onChange={changeSpeed}/>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>\r\n                            animation speed\r\n                        </td>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SettingsBar;\r\n","export const createMaze = (height, width, perfectMaze) => {\r\n    let maze = [];\r\n    for(let i = 0; i < height; i++) {\r\n        maze[i] = [];\r\n        for(let j = 0; j < width; j++) {\r\n            maze[i][j] = 1;\r\n        }\r\n    }\r\n\r\n    let walls = primsAlgorithm(maze);\r\n\r\n    if(!perfectMaze) {\r\n        let max = 100;\r\n        for(let n = 0; n < max; n++) {\r\n            let elem = getRandomItem(walls);\r\n            let i = parseInt(elem.substring(0, elem.indexOf(\",\")));\r\n            let j = parseInt(elem.substring(elem.indexOf(\",\") + 1));\r\n\r\n            let neighbours = getPathNeighbours(maze, i, j);\r\n            if(neighbours.length !== 2) continue;\r\n\r\n            let x = neighbours[0].x - neighbours[1].x;\r\n            let y = neighbours[0].y - neighbours[1].y;\r\n\r\n            if(y === 0) {\r\n                maze[i][j] = 0;\r\n            } else if(x === 0) {\r\n                maze[i][j] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    let startX = Math.floor(Math.random() * maze.length);\r\n    let startY = Math.floor(Math.random() * maze[0].length);\r\n    while(maze[startX][startY] !== 0) {\r\n        startX = Math.floor(Math.random() * maze.length);\r\n        startY = Math.floor(Math.random() * maze[0].length);\r\n    }\r\n    maze[startX][startY] = 2;\r\n\r\n    let endX = Math.floor(Math.random() * maze.length);\r\n    let endY = Math.floor(Math.random() * maze[0].length);\r\n    while(maze[endX][endY] !== 0 || (startX === endX && startY === endY)) {\r\n        endX = Math.floor(Math.random() * maze.length);\r\n        endY = Math.floor(Math.random() * maze[0].length);\r\n    }\r\n    maze[endX][endY] = 3;\r\n\r\n    return {\r\n        maze: maze,\r\n        start: [startX, startY],\r\n        end: [endX, endY]\r\n    };\r\n}\r\n\r\nfunction primsAlgorithm(maze) {\r\n    let remainingWalls = new Set();\r\n    for(let i = 0; i < maze.length; i++) {\r\n        for (let j = 0; j < maze[i].length; j++) {\r\n            remainingWalls.add(i + \",\" + j);\r\n        }\r\n    }\r\n\r\n    let walls = new Set();\r\n    let firstX = Math.floor(Math.random() * maze.length);\r\n    if(firstX % 2 === 1) firstX--;\r\n    let firstY = Math.floor(Math.random() * maze[0].length);\r\n    if(firstY % 2 === 1) firstY--;\r\n    addWalls(firstX,firstY, walls, remainingWalls, maze);\r\n    maze[firstX][firstY] = 0;\r\n    remainingWalls.delete(firstX + \",\" + firstY);\r\n    while(walls.size > 0) {\r\n        let random = getRandomItem(walls);\r\n        let x = parseInt(random.substring(0, random.indexOf(\",\")));\r\n        let y = parseInt(random.substring(random.indexOf(\",\") + 1));\r\n        let neighbours = getNeighbours(x, y, maze);\r\n        let randomNeighbour = neighbours.splice(Math.floor(Math.random() * neighbours.length), 1)[0];\r\n        createPath(x, y, randomNeighbour[0], randomNeighbour[1], maze, remainingWalls);\r\n        maze[x][y] = 0;\r\n        remainingWalls.delete(x + \",\" + y);\r\n        walls.delete(random);\r\n        addWalls(x, y, walls, remainingWalls, maze);\r\n    }\r\n\r\n    return remainingWalls;\r\n}\r\n\r\nfunction createPath(x1, y1, x2, y2, maze, remainingWalls) {\r\n    if(x1 === x2) {\r\n        if(y1 < y2) {\r\n            maze[x1][y1+1] = 0;\r\n            remainingWalls.delete(x1 + \",\" + (y1+1));\r\n        } else {\r\n            maze[x1][y1-1] = 0;\r\n            remainingWalls.delete(x1 + \",\" + (y1-1));\r\n        }\r\n    } else {\r\n        if(x1 < x2) {\r\n            maze[x1+1][y1] = 0;\r\n            remainingWalls.delete((x1+1) + \",\" + y1);\r\n        } else {\r\n            maze[x1-1][y1] = 0;\r\n            remainingWalls.delete((x1-1) + \",\" + y1);\r\n        }\r\n    }\r\n}\r\n\r\nfunction getNeighbours(x,y, maze) {\r\n    let neighbours = [];\r\n    if(x-2 >= 0 && maze[x-2][y] === 0) {\r\n        neighbours.push([x-2, y]);\r\n    }\r\n    if(x+2 < maze.length && maze[x+2][y] === 0) {\r\n        neighbours.push([x+2, y]);\r\n    }\r\n    if(y-2 >= 0 && maze[x][y-2] === 0) {\r\n        neighbours.push([x, y-2]);\r\n    }\r\n    if(y+2 < maze[0].length && maze[x][y+2] === 0) {\r\n        neighbours.push([x, y+2]);\r\n    }\r\n    return neighbours;\r\n}\r\n\r\nfunction addWalls(x,y, walls, remainingWalls, maze) {\r\n    if(x-2 >= 0 && maze[x-2][y] !== 0) {\r\n        walls.add((x-2) + \",\" + y);\r\n    }\r\n    if(x+2 < maze.length && maze[x+2][y] !== 0) {\r\n        walls.add((x+2) + \",\" + y);\r\n    }\r\n    if(y-2 >= 0 && maze[x][y-2] !== 0) {\r\n        walls.add(x + \",\" + (y-2));\r\n    }\r\n    if(y+2 < maze[0].length && maze[x][y+2] !== 0) {\r\n        walls.add(x + \",\" + (y+2));\r\n    }\r\n}\r\n\r\nfunction getRandomItem(set) {\r\n    let items = Array.from(set);\r\n    return items[Math.floor(Math.random() * items.length)];\r\n}\r\n\r\nexport const getPathNeighbours = (maze, x, y) => {\r\n    let n = [];\r\n\r\n    if(x > 0 && maze[x-1][y] !== 1) {\r\n        n.push({\r\n            x: x-1,\r\n            y: y\r\n        });\r\n    }\r\n    if(x < maze.length-1 && maze[x+1][y] !== 1) {\r\n        n.push({\r\n            x: x+1,\r\n            y: y\r\n        });\r\n    }\r\n    if(y > 0 && maze[x][y-1] !== 1) {\r\n        n.push({\r\n            x: x,\r\n            y: y-1\r\n        });\r\n    }\r\n    if(y < maze[0].length-1 && maze[x][y+1] !== 1) {\r\n        n.push({\r\n            x: x,\r\n            y: y+1\r\n        });\r\n    }\r\n    return n;\r\n}\r\n\r\nexport function getPathRecursive(elem) {\r\n    let path = [];\r\n\r\n    // Until element before starting node is reached\r\n    while((elem = elem.parent).parent !== null) {\r\n        path.push(elem); // Push element to path\r\n    }\r\n    return path;\r\n}","import { getPathNeighbours } from \"../Utils/Functions\";\r\n\r\nlet steps;\r\nlet maze;\r\nlet wasHere;\r\nlet path;\r\nlet end;\r\nlet count;\r\n\r\nfunction dfs(x, y, c) {\r\n    // If at the destination, return true\r\n    if(x === end[0] && y === end[1]) return true;\r\n\r\n    // If already visited, start new step-iteration\r\n    if(wasHere[x][y] === true) {\r\n        if(c !== 0) steps[++count] = [];\r\n        return false;\r\n    }\r\n\r\n    // Adding current node to steps and marking it as visited\r\n    steps[count].push({x: x, y: y});\r\n    wasHere[x][y] = true;\r\n\r\n    // Get neighbours\r\n    let n = getPathNeighbours(maze, x, y);\r\n\r\n    // If at junction, start new \"step\" after this one\r\n    if(n.length > 2) {\r\n        steps[++count] = [];\r\n    }\r\n\r\n    // For every neighbour\r\n    for(let i = 0; i < n.length; i++) {\r\n        // Call dfs recursively, if we found the destination we push current node to path and return true\r\n        if(dfs(n[i].x, n[i].y, i) === true) {\r\n            path.push({x: x, y: y});\r\n            return true;\r\n        }\r\n    }\r\n\r\n    // Not correct path\r\n    return false;\r\n}\r\n\r\nfunction getDfsSteps(m, s, e) {\r\n    maze = m;\r\n    steps = [];\r\n    end = e;\r\n    wasHere = [];\r\n    path = [];\r\n    count = 0;\r\n    for(let i = 0; i < m.length; i++) {\r\n        wasHere[i] = [];\r\n        for(let j = 0; j < m[i].length; j++) {\r\n            wasHere[i][j] = false;\r\n        }\r\n    }\r\n    steps = [[]];\r\n    dfs(s[0],s[1], 0); // Start search\r\n    steps[0].shift(); // Remove first step (on starting node)\r\n    path.pop(); // Remove last node from path (destination)\r\n\r\n    // Return values\r\n    return {\r\n        steps: steps,\r\n        path: path\r\n    };\r\n}\r\n\r\nexport { getDfsSteps };","import {getPathNeighbours, getPathRecursive} from \"../Utils/Functions\";\r\n\r\nlet PriorityQueue = require('priorityqueuejs'); // Using PriorityQueue\r\n\r\nlet steps;\r\nlet maze;\r\nlet wasHere;\r\nlet queue;\r\nlet path;\r\nlet end;\r\n\r\n// Dijkstra's algorithm\r\nfunction dijkstra() {\r\n    // While more elements are in the queue\r\n    while(!queue.isEmpty()) {\r\n        let elem = queue.deq(); // Get first element\r\n        if(wasHere[elem.x][elem.y] === true) continue; // Continue, if already visisted\r\n\r\n        wasHere[elem.x][elem.y] = true; // Set visisted\r\n\r\n        // If at destination\r\n        if(elem.x === end[0] && elem.y === end[1]) {\r\n            path = getPathRecursive(elem); // Get path\r\n            return;\r\n        }\r\n\r\n        // Create array if in new step, add current element to step\r\n        if(steps[elem.distance] === undefined) steps[elem.distance] = [];\r\n        steps[elem.distance].push(elem);\r\n\r\n        let neighbours = getPathNeighbours(maze, elem.x, elem.y); // Get neighbours\r\n\r\n        // For all neighbours\r\n        for(let n of neighbours) {\r\n            if(wasHere[n.x][n.y] === true) continue; // Continue, if visited\r\n\r\n            // Set new distance and current element as parent and enqueue the neighbour\r\n            n.distance = elem.distance + 1;\r\n            n.parent = elem;\r\n            queue.enq(n);\r\n        }\r\n    }\r\n}\r\n\r\nfunction getDijkstra(m, s, e) {\r\n    maze = m;\r\n    steps = [];\r\n    end = e;\r\n    wasHere = [];\r\n    path = [];\r\n    for (let i = 0; i < m.length; i++) {\r\n        wasHere[i] = [];\r\n        for (let j = 0; j < m[i].length; j++) {\r\n            wasHere[i][j] = false;\r\n        }\r\n    }\r\n\r\n    // Initialize PriorityQueue, element with smallest distance is at the front\r\n    queue = new PriorityQueue(function(a, b) {\r\n        return b.distance - a.distance;\r\n    });\r\n\r\n    queue.enq({x: s[0], y: s[1], distance: 0, parent: null}); // Enqueue first element\r\n\r\n    dijkstra(); // Start search\r\n\r\n    // Remove starting-node from steps\r\n    steps.shift();\r\n\r\n    // Return values\r\n    return {\r\n        steps: steps,\r\n        path: path\r\n    };\r\n}\r\n\r\nexport { getDijkstra };","import {getPathNeighbours, getPathRecursive} from \"../Utils/Functions\";\r\n\r\nlet steps;\r\nlet maze;\r\nlet wasHere;\r\nlet stack;\r\nlet path;\r\nlet end;\r\n\r\n// Get heuristic\r\nfunction getDistance(x, y) {\r\n    return Math.abs(x - end[0]) + Math.abs(y - end[1]);\r\n}\r\n\r\n// Greedy-best-first-search\r\nfunction greedySearch() {\r\n    // While elements in stack\r\n    while(stack.length !== 0) {\r\n        let elem = stack.pop(); // Get first element\r\n        if(wasHere[elem.x][elem.y]) continue; // If visited, continue\r\n\r\n        // If at destination\r\n        if(elem.x === end[0] && elem.y === end[1]) {\r\n            path = getPathRecursive(elem); // Get path\r\n            return;\r\n        }\r\n\r\n        // Set visited and push elem to steps\r\n        wasHere[elem.x][elem.y] = true;\r\n        steps.push(elem);\r\n\r\n        let neighbours = getPathNeighbours(maze, elem.x, elem.y); // Get neighbours\r\n\r\n        // Set distance and parent for all neighbours\r\n        for(let n of neighbours) {\r\n            n.distance = getDistance(n.x, n.y);\r\n            n.parent = elem;\r\n        }\r\n\r\n        // Sort neighbours\r\n        neighbours.sort(function(a, b) {\r\n            return b.distance - a.distance;\r\n        });\r\n\r\n        // Push sorted list to stack\r\n        for(let n of neighbours) {\r\n            stack.push(n);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction getGreedy(m, s, e) {\r\n    maze = m;\r\n    steps = [];\r\n    end = e;\r\n    wasHere = [];\r\n    stack = [];\r\n    path = [];\r\n    for (let i = 0; i < m.length; i++) {\r\n        wasHere[i] = [];\r\n        for (let j = 0; j < m[i].length; j++) {\r\n            wasHere[i][j] = false;\r\n        }\r\n    }\r\n\r\n    stack.push({x: s[0], y: s[1], parent: null}); // Push starting-node to stack\r\n\r\n    greedySearch(); // Start search\r\n\r\n    // Remove starting-node from steps\r\n    steps.shift();\r\n\r\n    // Return values\r\n    return {\r\n        steps: steps,\r\n        path: path\r\n    };\r\n}\r\n\r\nexport { getGreedy };","import {getPathNeighbours, getPathRecursive} from \"../Utils/Functions\";\r\n\r\nlet PriorityQueue = require('priorityqueuejs'); // Using PriorityQueue for A*\r\n\r\nlet steps;\r\nlet maze;\r\nlet wasHere;\r\nlet queue;\r\nlet path;\r\nlet end;\r\n\r\n// Get heuristic\r\nfunction getDistance(x, y) {\r\n    return Math.abs(x - end[0]) + Math.abs(y - end[1]);\r\n}\r\n\r\n// A*-algorithm\r\nfunction aStar() {\r\n    // While PriorityQueue has more elements\r\n    while(!queue.isEmpty()) {\r\n        let elem = queue.deq(); // Get \"best\" element from queue\r\n        if(wasHere[elem.x][elem.y] === true) continue; // Continue, if already visisted\r\n\r\n        // If at destination\r\n        if(elem.x === end[0] && elem.y === end[1]) {\r\n            path = getPathRecursive(elem); // Get path\r\n            return;\r\n        }\r\n\r\n        // Set visited\r\n        wasHere[elem.x][elem.y] = true;\r\n        steps.push(elem);\r\n\r\n        // Get all neighbours\r\n        let neighbours = getPathNeighbours(maze, elem.x, elem.y);\r\n\r\n        // For every neighbours\r\n        for(let n of neighbours) {\r\n            if(wasHere[n.x][n.y] === true) continue; // Continue, if already visited\r\n\r\n            n.distance = elem.distance + 1; // Increase distance (depth of iteration)\r\n            n.heuristic = getDistance(n.x, n.y); // Set heuristic\r\n            n.parent = elem; // Set current node as parent\r\n            queue.enq(n); // Enqueue them\r\n        }\r\n\r\n    }\r\n}\r\n\r\nfunction getAStar(m, s, e) {\r\n    maze = m;\r\n    steps = [];\r\n    end = e;\r\n    wasHere = [];\r\n    path = [];\r\n    for (let i = 0; i < m.length; i++) {\r\n        wasHere[i] = [];\r\n        for (let j = 0; j < m[i].length; j++) {\r\n            wasHere[i][j] = false;\r\n        }\r\n    }\r\n\r\n    // Initialize PriorityQueue\r\n    queue = new PriorityQueue(function(a, b) {\r\n        // Best distance + heuristic is at the front\r\n        return (b.distance + b.heuristic) - (a.distance + a.heuristic);\r\n    });\r\n\r\n    // Enqueue first element (starting node)\r\n    let h = getDistance(s[0], s[1]);\r\n    queue.enq({x: s[0], y: s[1], distance: 0, heuristic: h, parent: null});\r\n\r\n    aStar(); // Start search\r\n\r\n    // Remove starting--node from steps\r\n    steps.shift();\r\n\r\n    // Return values\r\n    return {\r\n        steps: steps,\r\n        path: path\r\n    };\r\n}\r\n\r\nexport { getAStar };","import React from 'react';\nimport Main from \"./Components/Content/Main\";\nimport NavBar from \"./Components/Navigation/NavBar\";\nimport SettingsBar from \"./Components/Settings/SettingsBar\";\nimport Animation from \"./Utils/Animation\";\nimport { createMaze } from \"./Utils/Functions\";\nimport './App.css';\n\nlet animation;\n\nclass App extends React.Component {\n    state = {\n        algorithm: \"a*\", // chosen algorithm, default tremaux\n        algorithmList: [],\n        perfectMaze: true,\n        animationRunning: false, // if the animation is currently running\n        solved: false, // if the maze is solved\n        maze: [], // maze-array\n        saveMaze: [], // saved inital maze to reset animation\n        start: [], // starting point, array has two coordinates as values\n        end: [], // destination, array has two coordinates as values\n        stepCount: 0, // number of steps the algorithm has done\n        /*width: 11,\n        height: 7,/**/\n        /**/width: 151,\n        height: 75,/**/\n        animationSpeed: 500 // speed of the animation, higher values mean faster animation\n    }\n\n    // Sets the algorithm\n    setAlgorithm = (algo) => {\n        if(algo === this.state.algorithm) return; // If current algorithm was chosen, do nothing\n\n        // Reset stepCount and set algorithm to new number\n        this.setState({stepCount: 0});\n        this.setState({algorithm: algo}, () => {\n            let maze = []; // Create new maze\n            let saveMaze = this.state.saveMaze;\n\n            // Copy saveMaze into maze\n            for(let i = 0; i < saveMaze.length; i++) {\n                maze[i] = [];\n                for (let j = 0; j < saveMaze[i].length; j++) {\n                    maze[i][j] = saveMaze[i][j];\n                }\n            }\n\n            // Change algorithm-number in Animation\n            animation.changeAlgorithm(algo, maze);\n\n            // Set new maze and set solved to false\n            this.setState({maze: maze, solved: false});\n        });\n    }\n\n    // Sets starting point\n    setStart = (arr) => {\n        this.setState({start: arr});\n    }\n\n    // Sets destination\n    setEnd = (arr) => {\n        this.setState({end: arr});\n    }\n\n    // Changes speed of the animation\n    changeSpeed = (e) => {\n        if(this.state.animationRunning) return; // Return if animation is currently running\n\n        // Change speed in state and Animation\n        let newSpeed = parseFloat(e.target.value);\n        this.setState({animationSpeed: newSpeed});\n        animation.changeSpeed(newSpeed);\n    }\n\n    // Creates new maze\n    createMaze = () => {\n        let values = createMaze(this.state.height, this.state.width, this.state.perfectMaze); // Calls createMaze function in Functions.js\n\n        // Sets maze, starting point and destination\n        this.setState({\n            maze: values.maze,\n            start: values.start,\n            end: values.end,\n            solved: false\n        }, () => {\n            // Sends new values to Animation\n            animation.changeMaze(values.maze.slice(0), values.steps, values.start, values.end);\n        });\n    }\n\n    // Creates new maze when component has mounted\n    componentDidMount(){\n        animation = new Animation(this.changeState, this.state.algorithm, this.addToStepCount);\n        let algos = animation.getAlgorithmTitles();\n        this.setState({algorithmList: algos});\n        this.createMaze();\n    }\n\n    // ChangeState-function to allow Animation to update the maze\n    changeState = (e) => {\n        this.setState(e);\n    }\n\n    // Change perfectMaze-state\n    setPerfectMaze = (v) => {\n        this.setState({perfectMaze: v});\n    }\n\n    // Click-handler for start/stop animation button\n    animationClick = () => {\n        if(this.state.animationRunning) {\n            // If currently running, end animation\n            animation.endAnimation();\n        } else if(this.state.solved === false) {\n            // If not running and not solved, start animation\n            animation.startAnimation();\n        }\n    }\n\n    // Click-handler for new-maze button\n    newMazeClick = () => {\n        if(this.state.animationRunning) return; // If animation running, do nothing\n\n        // Set stepCount to 0 and create new maze\n        this.setState({stepCount: 0});\n        this.createMaze();\n    }\n\n    // Increases step count\n    addToStepCount = (a) => {\n        this.setState({stepCount: this.state.stepCount + a});\n    }\n\n  render() {\n        return(\n            <div className=\"App\">\n                <NavBar algorithm={this.state.algorithm} algorithmList={this.state.algorithmList} animationRunning={this.state.animationRunning} setAlgorithm={this.setAlgorithm}/>\n                <SettingsBar\n                    size={this.state.width-1}\n                    solved={this.state.solved}\n                    animationRunning={this.state.animationRunning}\n                    animationSpeed={this.state.animationSpeed}\n                    changeSize={this.changeSize}\n                    newMazeClick={this.newMazeClick}\n                    animationClick={this.animationClick}\n                    changeSpeed={this.changeSpeed}\n                    perfectMaze={this.state.perfectMaze}\n                    setPerfectMaze={this.setPerfectMaze}\n                />\n                <Main\n                    maze={this.state.maze}\n                    algorithm={this.state.algorithm}\n                    steps={this.state.stepCount}\n                />\n            </div>\n  )};\n}\n\nexport default App;\n","import {getDfsSteps} from \"../Algorithms/Dfs\";\r\nimport {getDijkstra} from \"../Algorithms/Dijkstra\";\r\nimport {getTremaux} from \"../Algorithms/Tremaux\";\r\nimport {getGreedy} from \"../Algorithms/GreedySearch\";\r\nimport {getAStar} from \"../Algorithms/AStar\";\r\n\r\nclass Animation {\r\n    setState;\r\n    maze;\r\n    steps;\r\n    path;\r\n    algorithm;\r\n    algorithmList;\r\n    speed;\r\n    interval;\r\n    start;\r\n    end;\r\n    pathAnimating;\r\n    count;\r\n    dijkstraMax;\r\n    pathNumber = 5;\r\n    lastElem;\r\n    addCount;\r\n    getStepFunction;\r\n    stepFunction;\r\n    pathFunction;\r\n\r\n    constructor(setState, algorithm, addCountFunction) {\r\n        this.setState = setState;\r\n        this.speed = 5;\r\n        this.addCount = addCountFunction;\r\n\r\n        this.algorithmList = {\r\n            \"a*\": {\r\n                getSteps: getAStar,\r\n                step: this.defaultStep,\r\n                path: this.pathStepBack\r\n            },\r\n            \"dfs\": {\r\n                getSteps: getDfsSteps,\r\n                step: this.arrayStep,\r\n                path: this.pathStepBack\r\n            },\r\n            \"dijkstra\": {\r\n                getSteps: getDijkstra,\r\n                step: this.arrayStep,\r\n                path: this.pathStepBack\r\n            },\r\n            \"greedy\": {\r\n                getSteps: getGreedy,\r\n                step: this.defaultStep,\r\n                path: this.pathStepBack\r\n            },\r\n            /*\"tremaux\": {\r\n                getSteps: getTremaux,\r\n                step: this.tremauxStep,\r\n                path: this.pathStepFront\r\n            }*/\r\n        }\r\n\r\n        this.changeAlgorithm(algorithm);\r\n    }\r\n\r\n    getAlgorithmTitles = () => {\r\n        return Object.keys(this.algorithmList);\r\n    }\r\n\r\n    changeAlgorithm(algo, maze) {\r\n        if(maze !== undefined) {\r\n            this.maze = maze;\r\n        }\r\n\r\n        this.getStepFunction = this.algorithmList[algo].getSteps;\r\n        this.pathFunction = this.algorithmList[algo].path;\r\n        this.stepFunction = this.algorithmList[algo].step;\r\n\r\n        this.algorithm = algo;\r\n        this.steps = [];\r\n        this.path = [];\r\n\r\n        this.setState({stepCount: 0});\r\n    }\r\n\r\n    changeAlgorithmSafe(nr) {\r\n        this.algorithm = nr;\r\n    }\r\n\r\n    changeMaze(maze, steps, start, end) {\r\n        this.maze = maze;\r\n        this.steps = [];\r\n        this.start = start;\r\n        this.end = end;\r\n\r\n        let saveMaze = [];\r\n        for(let i = 0; i < maze.length; i++) {\r\n            saveMaze[i] = [];\r\n            for (let j = 0; j < maze[i].length; j++) {\r\n                saveMaze[i][j] = maze[i][j];\r\n            }\r\n        }\r\n        this.setState({maze: this.maze, saveMaze: saveMaze});\r\n    }\r\n\r\n    changeSpeed(speed) {\r\n        this.speed = 505 - speed;\r\n    }\r\n\r\n    startAnimation() {\r\n        if(this.steps.length !== 0) {\r\n            this.setState({animationRunning: true});\r\n            this.animate(this.stepFunction, this.pathFunction)\r\n            return true;\r\n        }\r\n\r\n        if(this.stepFunction === undefined || this.pathFunction === undefined) {\r\n            alert(\"Error\");\r\n            return false;\r\n        }\r\n\r\n        let values = this.getStepFunction(this.maze.slice(0), this.start, this.end);\r\n        this.steps = values.steps;\r\n        this.path = values.path;\r\n\r\n        this.setState({animationRunning: true});\r\n        this.animate(this.stepFunction, this.pathFunction);\r\n        return true;\r\n    }\r\n\r\n    endAnimation(finished, pathFunc) {\r\n        clearInterval(this.interval);\r\n        if (finished) {\r\n            this.animatePath(pathFunc);\r\n        }\r\n        if(this.pathAnimating !== true) {\r\n            this.setState({animationRunning: false});\r\n        }\r\n    }\r\n\r\n    animatePath(func) {\r\n        this.pathAnimating = true;\r\n        let int = setInterval(() => {\r\n            if(this.path.length === 0) {\r\n                clearInterval(int);\r\n                this.setState({animationRunning: false});\r\n                this.setState({solved: true});\r\n                this.pathAnimating = false;\r\n                return;\r\n            }\r\n            func();\r\n        }, 10);\r\n    }\r\n\r\n    pathStepBack = () => {\r\n        let elem = this.path.pop();\r\n        this.maze[elem.x][elem.y] = this.pathNumber;\r\n        this.setState({maze: this.maze});\r\n    }\r\n\r\n    pathStepFront = () => {\r\n        let elem = this.path.shift();\r\n        this.maze[elem.x][elem.y] = this.pathNumber;\r\n        this.setState({maze: this.maze});\r\n    }\r\n\r\n    animate(step, pathFunc) {\r\n        this.interval = setInterval(() => {\r\n            if (this.steps.length === 0) {\r\n                this.endAnimation(true, pathFunc);\r\n                return;\r\n            }\r\n            step();\r\n        }, this.speed);\r\n    }\r\n\r\n    defaultStep = () => {\r\n        let elem = this.steps.shift();\r\n        this.maze[elem.x][elem.y] = 4;\r\n        this.addCount(1);\r\n        this.setState({maze: this.maze});\r\n    }\r\n\r\n    arrayStep = () => {\r\n        let arr = this.steps.shift();\r\n        for(let elem of arr) {\r\n            this.maze[elem.x][elem.y] = 4;\r\n        }\r\n        this.addCount(arr.length);\r\n        this.setState({maze: this.maze});\r\n    }\r\n\r\n    tremauxStep = () => {\r\n        let arr = this.steps.shift();\r\n\r\n        if(arr.end === true) {\r\n            let lastArr = this.lastElem;\r\n            if(lastArr.junctionX !== undefined && lastArr.junctionY !== undefined) {\r\n                this.maze[lastArr.junctionX][lastArr.junctionY] = 0;\r\n                this.addCount(1);\r\n            } else {\r\n                for (let i = 1; i < lastArr.length-1; i++) {\r\n                    this.maze[lastArr[i].x][lastArr[i].y] = 0;\r\n                }\r\n\r\n                let mark = lastArr[0];\r\n                if(mark !== null && mark.markedX !== undefined && mark.markedY !== undefined) {\r\n                    this.maze[mark.markedX][mark.markedY] = mark.markCount;\r\n                }\r\n            }\r\n            this.maze[this.start[0]][this.start[1]] = 2;\r\n            this.maze[this.end[0]][this.end[1]] = 3;\r\n            this.setState({maze: this.maze});\r\n            return;\r\n        }\r\n\r\n        if(arr.junctionX !== undefined && arr.junctionY !== undefined) {\r\n            this.maze[this.start[0]][this.start[1]] = 2;\r\n            this.maze[this.end[0]][this.end[1]] = 3;\r\n            this.maze[arr.junctionX][arr.junctionY] = 4;\r\n            this.addCount(1);\r\n            if(this.lastElem !== undefined) {\r\n                let lastArr = this.lastElem;\r\n                let first = lastArr[0];\r\n                let last = lastArr[lastArr.length-1];\r\n\r\n                let x1;\r\n                let x2;\r\n                let y1;\r\n                let y2;\r\n\r\n                if(first !== null && (last.markedX !== first.markedX || last.markedY !== first.markedY)) {\r\n                    if(first.markedX !== null && first.markedY !== null) {\r\n                        x1 = first.markedX;\r\n                        y1 = first.markedY;\r\n                        this.maze[x1][y1] = first.markCount;\r\n                    }\r\n                }\r\n                x2 = last.markedX;\r\n                y2 = last.markedY;\r\n                this.maze[x2][y2] = last.markCount;\r\n\r\n                for (let i = 1; i < lastArr.length-1; i++) {\r\n                    if((lastArr[i].x !== x1 || lastArr[i].y !== y1) && (lastArr[i].x !== x2 || lastArr[i].y !== y2)) {\r\n                        this.maze[lastArr[i].x][lastArr[i].y] = 0;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            this.maze[this.start[0]][this.start[1]] = 2;\r\n            this.maze[this.end[0]][this.end[1]] = 3;\r\n            if(this.lastElem !== undefined && this.lastElem.junctionX !== undefined && this.lastElem.junctionY !== undefined) {\r\n                this.maze[this.lastElem.junctionX][this.lastElem.junctionY] = 0;\r\n            }\r\n            for(let i = 1; i < arr.length -1; i++) {\r\n                this.maze[arr[i].x][arr[i].y] = 4;\r\n            }\r\n            this.addCount(arr.length-2);\r\n        }\r\n        this.lastElem = arr;\r\n        this.setState({maze: this.maze});\r\n    }\r\n}\r\n\r\nexport default Animation;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}